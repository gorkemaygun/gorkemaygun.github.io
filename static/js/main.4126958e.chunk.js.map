{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","getTime","setInterval","localtime","Moment","utcOffset","timezone","format","setState","time","getWeather","zipCode","document","getElementById","value","fetch","then","response","status","json","data","console","log","zip","name","temp","Math","floor","main","description","weather","catch","err","className","id","type","placeholder","onClick","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0PAsFeA,G,8NA/EbC,MAAQ,G,EAERC,QAAU,WACRC,aAAY,WACV,IAAIC,EAAYC,MACbC,UAAU,EAAKL,MAAMM,SAAW,IAChCC,OAAO,iCACV,EAAKC,SAAS,CACZC,KAAMN,MAEP,M,EAGLO,WAAa,WACX,IAAMC,EAAUC,SAASC,eAAe,YAAYC,MAEpDC,MACE,sDACEJ,EADF,0DAKCK,MAAK,SAACC,GACmB,MAApBA,EAASC,OAQbD,EAASE,OAAOH,MAAK,SAACI,GACpBC,QAAQC,IAAIF,GACZ,EAAKZ,SAAS,CACZe,IAAKZ,EACLa,KAAMJ,EAAKI,KACXC,KAAMC,KAAKC,MAAMP,EAAKQ,KAAKH,MAAQ,SACnCnB,SAAUc,EAAKd,SACfuB,YAAaT,EAAKU,QAAQ,GAAGF,OAE/B,EAAK3B,aAhBLoB,QAAQC,IACN,gDAAkDL,EAASC,WAkBhEa,OAAM,SAACC,GACNX,QAAQC,IAAI,kBAAmBU,O,uDAKnC,OACE,oCACE,8BACE,yBAAKC,UAAU,SACb,sDACA,2BACEC,GAAG,WACHC,KAAK,OACLC,YAAY,yBAEd,4BACEH,UAAU,uBACVI,QAASC,KAAK5B,WACdwB,GAAG,UAHL,WAQF,yBAAKD,UAAU,QACb,uBAAGC,GAAG,QAAQI,KAAKtC,MAAMwB,MACzB,uBAAGU,GAAG,QAAQI,KAAKtC,MAAMyB,MACzB,uBAAGS,GAAG,eAAeI,KAAKtC,MAAM6B,aAChC,uBAAGK,GAAG,YAAYI,KAAKtC,MAAMS,a,GAxEvB8B,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASC,eAAe,SDyHpB,kBAAmBoC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.4126958e.chunk.js","sourcesContent":["import React from \"react\";\nimport Moment from \"moment\";\nimport \"moment-timezone\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nclass App extends React.Component {\n  state = {};\n\n  getTime = () => {\n    setInterval(() => {\n      let localtime = Moment()\n        .utcOffset(this.state.timezone / 60)\n        .format(\"dddd, MMMM Do YYYY, h:mm:ss a\");\n      this.setState({\n        time: localtime,\n      });\n    }, 1000);\n  };\n\n  getWeather = () => {\n    const zipCode = document.getElementById(\"zipInput\").value;\n\n    fetch(\n      \"http://api.openweathermap.org/data/2.5/weather?zip=\" +\n        zipCode +\n        \"&appid=d74695e179808f96917859dcea87adfb\" +\n        \"&units=imperial\"\n    )\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(\n            \"Looks like there was a problem. Status Code: \" + response.status\n          );\n          return;\n        }\n\n        // Examine the text in the response\n        response.json().then((data) => {\n          console.log(data);\n          this.setState({\n            zip: zipCode,\n            name: data.name,\n            temp: Math.floor(data.main.temp) + \" Â°F\",\n            timezone: data.timezone,\n            description: data.weather[0].main,\n          });\n          this.getTime();\n        });\n      })\n      .catch((err) => {\n        console.log(\"Fetch Error :-S\", err);\n      });\n  };\n\n  render() {\n    return (\n      <>\n        <body>\n          <div className=\"bckg1\">\n            <h3>Welcome to Weather App</h3>\n            <input\n              id=\"zipInput\"\n              type=\"text\"\n              placeholder=\"Please Enter ZipCode\"\n            ></input>\n            <button\n              className=\" btn btn-primary m-5\"\n              onClick={this.getWeather}\n              id=\"search\"\n            >\n              Search\n            </button>\n          </div>\n          <div className=\"bckg\">\n            <p id=\"name\">{this.state.name}</p>\n            <p id=\"temp\">{this.state.temp}</p>\n            <p id=\"description\">{this.state.description}</p>\n            <p id=\"timezone\">{this.state.time}</p>\n          </div>\n        </body>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}